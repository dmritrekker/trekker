name: Static build

on:
  push:
    branches:
      - build
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [Release]
        include:
          - os: ubuntu-latest
            c_compiler: gcc-14
            cpp_compiler: g++-14
            additional_packages: libomp-dev
            artifact_prefix: ubuntu
            executable_name: trekker_linux
          - os: macos-latest
            c_compiler: /opt/homebrew/opt/llvm@18/bin/clang
            cpp_compiler: /opt/homebrew/opt/llvm@18/bin/clang++
            additional_packages: llvm@18 libomp
            artifact_prefix: macos-arm64
            executable_name: trekker_macos_arm64
            arch: arm64

    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.ref || github.ref_name }}

    - name: Install dependencies (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install -y gcc-14 g++-14 ${{ matrix.additional_packages }}

    - name: Install dependencies (macOS)
      if: startsWith(matrix.os, 'macos')
      run: |
        brew install ${{ matrix.additional_packages }}
        echo "PATH=/opt/homebrew/opt/llvm@18/bin:$PATH" >> $GITHUB_PATH
        export LDFLAGS="-L/opt/homebrew/opt/llvm@18/lib -L/opt/homebrew/opt/libomp/lib"
        export CPPFLAGS="-I/opt/homebrew/opt/llvm@18/include -I/opt/homebrew/opt/libomp/include"
        echo "OpenMP_C_FLAGS=-I/opt/homebrew/opt/llvm@18/include -I/opt/homebrew/opt/libomp/include -Xclang -fopenmp" >> $GITHUB_ENV
        echo "OpenMP_CXX_FLAGS=-I/opt/homebrew/opt/llvm@18/include -I/opt/homebrew/opt/libomp/include -Xclang -fopenmp" >> $GITHUB_ENV
        echo "OpenMP_C_LIB_NAMES=omp" >> $GITHUB_ENV
        echo "OpenMP_CXX_LIB_NAMES=omp" >> $GITHUB_ENV
        echo "OpenMP_omp_LIBRARY=/opt/homebrew/opt/libomp/lib/libomp.dylib" >> $GITHUB_ENV

    - name: Set up build directory
      shell: bash
      run: echo "build-output-dir=${{ github.workspace }}/build_${{ matrix.artifact_prefix }}" >> "$GITHUB_ENV"

    - name: Configure CMake (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      shell: bash
      run: |
        cmake -B ${{ env.build-output-dir }} \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
          -DBUILD_SHARED_LIBS=OFF \
          -DDEFINE_CUDA=OFF \
          -S ${{ github.workspace }}

    - name: Configure CMake (macOS)
      if: startsWith(matrix.os, 'macos')
      shell: bash
      run: |
        cmake -B ${{ env.build-output-dir }} \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
          -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }} \
          -DBUILD_SHARED_LIBS=OFF \
          -DDEFINE_CUDA=OFF \
          -DOpenMP_C_FLAGS="${{ env.OpenMP_C_FLAGS }}" \
          -DOpenMP_CXX_FLAGS="${{ env.OpenMP_CXX_FLAGS }}" \
          -DOpenMP_C_LIB_NAMES="${{ env.OpenMP_C_LIB_NAMES }}" \
          -DOpenMP_CXX_LIB_NAMES="${{ env.OpenMP_CXX_LIB_NAMES }}" \
          -DOpenMP_omp_LIBRARY="${{ env.OpenMP_omp_LIBRARY }}" \
          -S ${{ github.workspace }}  

    - name: Build
      run: cmake --build ${{ env.build-output-dir }} --config ${{ matrix.build_type }} --target install

    - name: Set artifact name
      shell: bash
      run: echo "ARTIFACT_NAME=${{ matrix.artifact_prefix }}_binaries" >> "$GITHUB_ENV"

    - name: Rename executable
      if: startsWith(matrix.os, 'ubuntu')
      shell: bash
      run: |
        mv ${{ env.build-output-dir }}/install/bin/trekker* ${{ env.build-output-dir }}/install/bin/${{ matrix.executable_name }}

    - name: Rename executable
      if: startsWith(matrix.os, 'macos')
      shell: bash
      run: |
        mv ${{ env.build-output-dir }}/install/bin/trekker* ${{ env.build-output-dir }}/install/bin/${{ matrix.executable_name }}

    - name: Upload binaries as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.build-output-dir }}/install/bin/${{ matrix.executable_name }}
        if-no-files-found: error
        retention-days: 5
